"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/browserslist";
exports.ids = ["vendor-chunks/browserslist"];
exports.modules = {

/***/ "(ssr)/./node_modules/browserslist/error.js":
/*!********************************************!*\
  !*** ./node_modules/browserslist/error.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nfunction BrowserslistError(message) {\n    this.name = \"BrowserslistError\";\n    this.message = message;\n    this.browserslist = true;\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, BrowserslistError);\n    }\n}\nBrowserslistError.prototype = Error.prototype;\nmodule.exports = BrowserslistError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnJvd3NlcnNsaXN0L2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxrQkFBa0JDLE9BQU87SUFDaEMsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNELE9BQU8sR0FBR0E7SUFDZixJQUFJLENBQUNFLFlBQVksR0FBRztJQUNwQixJQUFJQyxNQUFNQyxpQkFBaUIsRUFBRTtRQUMzQkQsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFTDtJQUNoQztBQUNGO0FBRUFBLGtCQUFrQk0sU0FBUyxHQUFHRixNQUFNRSxTQUFTO0FBRTdDQyxPQUFPQyxPQUFPLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9zLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJzbGlzdC9lcnJvci5qcz9kMmRlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEJyb3dzZXJzbGlzdEVycm9yKG1lc3NhZ2UpIHtcbiAgdGhpcy5uYW1lID0gJ0Jyb3dzZXJzbGlzdEVycm9yJ1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gIHRoaXMuYnJvd3NlcnNsaXN0ID0gdHJ1ZVxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBCcm93c2Vyc2xpc3RFcnJvcilcbiAgfVxufVxuXG5Ccm93c2Vyc2xpc3RFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGVcblxubW9kdWxlLmV4cG9ydHMgPSBCcm93c2Vyc2xpc3RFcnJvclxuIl0sIm5hbWVzIjpbIkJyb3dzZXJzbGlzdEVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJicm93c2Vyc2xpc3QiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browserslist/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/browserslist/index.js":
/*!********************************************!*\
  !*** ./node_modules/browserslist/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar jsReleases = __webpack_require__(/*! node-releases/data/processed/envs.json */ \"(ssr)/./node_modules/node-releases/data/processed/envs.json\");\nvar agents = (__webpack_require__(/*! caniuse-lite/dist/unpacker/agents */ \"(ssr)/./node_modules/caniuse-lite/dist/unpacker/agents.js\").agents);\nvar jsEOL = __webpack_require__(/*! node-releases/data/release-schedule/release-schedule.json */ \"(ssr)/./node_modules/node-releases/data/release-schedule/release-schedule.json\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar e2c = __webpack_require__(/*! electron-to-chromium/versions */ \"(ssr)/./node_modules/electron-to-chromium/versions.js\");\nvar BrowserslistError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/browserslist/error.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/browserslist/parse.js\");\nvar env = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/browserslist/node.js\") // Will load browser.js in webpack\n;\nvar YEAR = 365.259641 * 24 * 60 * 60 * 1000;\nvar ANDROID_EVERGREEN_FIRST = \"37\";\nvar OP_MOB_BLINK_FIRST = 14;\n// Helpers\nfunction isVersionsMatch(versionA, versionB) {\n    return (versionA + \".\").indexOf(versionB + \".\") === 0;\n}\nfunction isEolReleased(name) {\n    var version = name.slice(1);\n    return browserslist.nodeVersions.some(function(i) {\n        return isVersionsMatch(i, version);\n    });\n}\nfunction normalize(versions) {\n    return versions.filter(function(version) {\n        return typeof version === \"string\";\n    });\n}\nfunction normalizeElectron(version) {\n    var versionToUse = version;\n    if (version.split(\".\").length === 3) {\n        versionToUse = version.split(\".\").slice(0, -1).join(\".\");\n    }\n    return versionToUse;\n}\nfunction nameMapper(name) {\n    return function mapName(version) {\n        return name + \" \" + version;\n    };\n}\nfunction getMajor(version) {\n    return parseInt(version.split(\".\")[0]);\n}\nfunction getMajorVersions(released, number) {\n    if (released.length === 0) return [];\n    var majorVersions = uniq(released.map(getMajor));\n    var minimum = majorVersions[majorVersions.length - number];\n    if (!minimum) {\n        return released;\n    }\n    var selected = [];\n    for(var i = released.length - 1; i >= 0; i--){\n        if (minimum > getMajor(released[i])) break;\n        selected.unshift(released[i]);\n    }\n    return selected;\n}\nfunction uniq(array) {\n    var filtered = [];\n    for(var i = 0; i < array.length; i++){\n        if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);\n    }\n    return filtered;\n}\nfunction fillUsage(result, name, data) {\n    for(var i in data){\n        result[name + \" \" + i] = data[i];\n    }\n}\nfunction generateFilter(sign, version) {\n    version = parseFloat(version);\n    if (sign === \">\") {\n        return function(v) {\n            return parseLatestFloat(v) > version;\n        };\n    } else if (sign === \">=\") {\n        return function(v) {\n            return parseLatestFloat(v) >= version;\n        };\n    } else if (sign === \"<\") {\n        return function(v) {\n            return parseFloat(v) < version;\n        };\n    } else {\n        return function(v) {\n            return parseFloat(v) <= version;\n        };\n    }\n    function parseLatestFloat(v) {\n        return parseFloat(v.split(\"-\")[1] || v);\n    }\n}\nfunction generateSemverFilter(sign, version) {\n    version = version.split(\".\").map(parseSimpleInt);\n    version[1] = version[1] || 0;\n    version[2] = version[2] || 0;\n    if (sign === \">\") {\n        return function(v) {\n            v = v.split(\".\").map(parseSimpleInt);\n            return compareSemver(v, version) > 0;\n        };\n    } else if (sign === \">=\") {\n        return function(v) {\n            v = v.split(\".\").map(parseSimpleInt);\n            return compareSemver(v, version) >= 0;\n        };\n    } else if (sign === \"<\") {\n        return function(v) {\n            v = v.split(\".\").map(parseSimpleInt);\n            return compareSemver(version, v) > 0;\n        };\n    } else {\n        return function(v) {\n            v = v.split(\".\").map(parseSimpleInt);\n            return compareSemver(version, v) >= 0;\n        };\n    }\n}\nfunction parseSimpleInt(x) {\n    return parseInt(x);\n}\nfunction compare(a, b) {\n    if (a < b) return -1;\n    if (a > b) return +1;\n    return 0;\n}\nfunction compareSemver(a, b) {\n    return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || \"0\"), parseInt(b[1] || \"0\")) || compare(parseInt(a[2] || \"0\"), parseInt(b[2] || \"0\"));\n}\n// this follows the npm-like semver behavior\nfunction semverFilterLoose(operator, range) {\n    range = range.split(\".\").map(parseSimpleInt);\n    if (typeof range[1] === \"undefined\") {\n        range[1] = \"x\";\n    }\n    // ignore any patch version because we only return minor versions\n    // range[2] = 'x'\n    switch(operator){\n        case \"<=\":\n            return function(version) {\n                version = version.split(\".\").map(parseSimpleInt);\n                return compareSemverLoose(version, range) <= 0;\n            };\n        case \">=\":\n        default:\n            return function(version) {\n                version = version.split(\".\").map(parseSimpleInt);\n                return compareSemverLoose(version, range) >= 0;\n            };\n    }\n}\n// this follows the npm-like semver behavior\nfunction compareSemverLoose(version, range) {\n    if (version[0] !== range[0]) {\n        return version[0] < range[0] ? -1 : +1;\n    }\n    if (range[1] === \"x\") {\n        return 0;\n    }\n    if (version[1] !== range[1]) {\n        return version[1] < range[1] ? -1 : +1;\n    }\n    return 0;\n}\nfunction resolveVersion(data, version) {\n    if (data.versions.indexOf(version) !== -1) {\n        return version;\n    } else if (browserslist.versionAliases[data.name][version]) {\n        return browserslist.versionAliases[data.name][version];\n    } else {\n        return false;\n    }\n}\nfunction normalizeVersion(data, version) {\n    var resolved = resolveVersion(data, version);\n    if (resolved) {\n        return resolved;\n    } else if (data.versions.length === 1) {\n        return data.versions[0];\n    } else {\n        return false;\n    }\n}\nfunction filterByYear(since, context) {\n    since = since / 1000;\n    return Object.keys(agents).reduce(function(selected, name) {\n        var data = byName(name, context);\n        if (!data) return selected;\n        var versions = Object.keys(data.releaseDate).filter(function(v) {\n            var date = data.releaseDate[v];\n            return date !== null && date >= since;\n        });\n        return selected.concat(versions.map(nameMapper(data.name)));\n    }, []);\n}\nfunction cloneData(data) {\n    return {\n        name: data.name,\n        versions: data.versions,\n        released: data.released,\n        releaseDate: data.releaseDate\n    };\n}\nfunction byName(name, context) {\n    name = name.toLowerCase();\n    name = browserslist.aliases[name] || name;\n    if (context.mobileToDesktop && browserslist.desktopNames[name]) {\n        var desktop = browserslist.data[browserslist.desktopNames[name]];\n        if (name === \"android\") {\n            return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);\n        } else {\n            var cloned = cloneData(desktop);\n            cloned.name = name;\n            return cloned;\n        }\n    }\n    return browserslist.data[name];\n}\nfunction normalizeAndroidVersions(androidVersions, chromeVersions) {\n    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);\n    return androidVersions.filter(function(version) {\n        return /^(?:[2-4]\\.|[34]$)/.test(version);\n    }).concat(chromeVersions.slice(iFirstEvergreen));\n}\nfunction copyObject(obj) {\n    var copy = {};\n    for(var key in obj){\n        copy[key] = obj[key];\n    }\n    return copy;\n}\nfunction normalizeAndroidData(android, chrome) {\n    android.released = normalizeAndroidVersions(android.released, chrome.released);\n    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);\n    android.releaseDate = copyObject(android.releaseDate);\n    android.released.forEach(function(v) {\n        if (android.releaseDate[v] === undefined) {\n            android.releaseDate[v] = chrome.releaseDate[v];\n        }\n    });\n    return android;\n}\nfunction checkName(name, context) {\n    var data = byName(name, context);\n    if (!data) throw new BrowserslistError(\"Unknown browser \" + name);\n    return data;\n}\nfunction unknownQuery(query) {\n    return new BrowserslistError(\"Unknown browser query `\" + query + \"`. \" + \"Maybe you are using old Browserslist or made typo in query.\");\n}\n// Adjusts last X versions queries for some mobile browsers,\n// where caniuse data jumps from a legacy version to the latest\nfunction filterJumps(list, name, nVersions, context) {\n    var jump = 1;\n    switch(name){\n        case \"android\":\n            if (context.mobileToDesktop) return list;\n            var released = browserslist.data.chrome.released;\n            jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);\n            break;\n        case \"op_mob\":\n            var latest = browserslist.data.op_mob.released.slice(-1)[0];\n            jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;\n            break;\n        default:\n            return list;\n    }\n    if (nVersions <= jump) {\n        return list.slice(-1);\n    }\n    return list.slice(jump - 1 - nVersions);\n}\nfunction isSupported(flags, withPartial) {\n    return typeof flags === \"string\" && (flags.indexOf(\"y\") >= 0 || withPartial && flags.indexOf(\"a\") >= 0);\n}\nfunction resolve(queries, context) {\n    return parse(QUERIES, queries).reduce(function(result, node, index) {\n        if (node.not && index === 0) {\n            throw new BrowserslistError(\"Write any browsers query (for instance, `defaults`) \" + \"before `\" + node.query + \"`\");\n        }\n        var type = QUERIES[node.type];\n        var array = type.select.call(browserslist, context, node).map(function(j) {\n            var parts = j.split(\" \");\n            if (parts[1] === \"0\") {\n                return parts[0] + \" \" + byName(parts[0], context).versions[0];\n            } else {\n                return j;\n            }\n        });\n        if (node.compose === \"and\") {\n            if (node.not) {\n                return result.filter(function(j) {\n                    return array.indexOf(j) === -1;\n                });\n            } else {\n                return result.filter(function(j) {\n                    return array.indexOf(j) !== -1;\n                });\n            }\n        } else {\n            if (node.not) {\n                var filter = {};\n                array.forEach(function(j) {\n                    filter[j] = true;\n                });\n                return result.filter(function(j) {\n                    return !filter[j];\n                });\n            }\n            return result.concat(array);\n        }\n    }, []);\n}\nfunction prepareOpts(opts) {\n    if (typeof opts === \"undefined\") opts = {};\n    if (typeof opts.path === \"undefined\") {\n        opts.path = path.resolve ? path.resolve(\".\") : \".\";\n    }\n    return opts;\n}\nfunction prepareQueries(queries, opts) {\n    if (typeof queries === \"undefined\" || queries === null) {\n        var config = browserslist.loadConfig(opts);\n        if (config) {\n            queries = config;\n        } else {\n            queries = browserslist.defaults;\n        }\n    }\n    return queries;\n}\nfunction checkQueries(queries) {\n    if (!(typeof queries === \"string\" || Array.isArray(queries))) {\n        throw new BrowserslistError(\"Browser queries must be an array or string. Got \" + typeof queries + \".\");\n    }\n}\nvar cache = {};\nfunction browserslist(queries, opts) {\n    opts = prepareOpts(opts);\n    queries = prepareQueries(queries, opts);\n    checkQueries(queries);\n    var context = {\n        ignoreUnknownVersions: opts.ignoreUnknownVersions,\n        dangerousExtend: opts.dangerousExtend,\n        mobileToDesktop: opts.mobileToDesktop,\n        path: opts.path,\n        env: opts.env\n    };\n    env.oldDataWarning(browserslist.data);\n    var stats = env.getStat(opts, browserslist.data);\n    if (stats) {\n        context.customUsage = {};\n        for(var browser in stats){\n            fillUsage(context.customUsage, browser, stats[browser]);\n        }\n    }\n    var cacheKey = JSON.stringify([\n        queries,\n        context\n    ]);\n    if (cache[cacheKey]) return cache[cacheKey];\n    var result = uniq(resolve(queries, context)).sort(function(name1, name2) {\n        name1 = name1.split(\" \");\n        name2 = name2.split(\" \");\n        if (name1[0] === name2[0]) {\n            // assumptions on caniuse data\n            // 1) version ranges never overlaps\n            // 2) if version is not a range, it never contains `-`\n            var version1 = name1[1].split(\"-\")[0];\n            var version2 = name2[1].split(\"-\")[0];\n            return compareSemver(version2.split(\".\"), version1.split(\".\"));\n        } else {\n            return compare(name1[0], name2[0]);\n        }\n    });\n    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {\n        cache[cacheKey] = result;\n    }\n    return result;\n}\nbrowserslist.parse = function(queries, opts) {\n    opts = prepareOpts(opts);\n    queries = prepareQueries(queries, opts);\n    checkQueries(queries);\n    return parse(QUERIES, queries);\n};\n// Will be filled by Can I Use data below\nbrowserslist.cache = {};\nbrowserslist.data = {};\nbrowserslist.usage = {\n    global: {},\n    custom: null\n};\n// Default browsers query\nbrowserslist.defaults = [\n    \"> 0.5%\",\n    \"last 2 versions\",\n    \"Firefox ESR\",\n    \"not dead\"\n];\n// Browser names aliases\nbrowserslist.aliases = {\n    fx: \"firefox\",\n    ff: \"firefox\",\n    ios: \"ios_saf\",\n    explorer: \"ie\",\n    blackberry: \"bb\",\n    explorermobile: \"ie_mob\",\n    operamini: \"op_mini\",\n    operamobile: \"op_mob\",\n    chromeandroid: \"and_chr\",\n    firefoxandroid: \"and_ff\",\n    ucandroid: \"and_uc\",\n    qqandroid: \"and_qq\"\n};\n// Can I Use only provides a few versions for some browsers (e.g. and_chr).\n// Fallback to a similar browser for unknown versions\n// Note op_mob is not included as its chromium versions are not in sync with Opera desktop\nbrowserslist.desktopNames = {\n    and_chr: \"chrome\",\n    and_ff: \"firefox\",\n    ie_mob: \"ie\",\n    android: \"chrome\" // has extra processing logic\n};\n// Aliases to work with joined versions like `ios_saf 7.0-7.1`\nbrowserslist.versionAliases = {};\nbrowserslist.clearCaches = env.clearCaches;\nbrowserslist.parseConfig = env.parseConfig;\nbrowserslist.readConfig = env.readConfig;\nbrowserslist.findConfig = env.findConfig;\nbrowserslist.loadConfig = env.loadConfig;\nbrowserslist.coverage = function(browsers, stats) {\n    var data;\n    if (typeof stats === \"undefined\") {\n        data = browserslist.usage.global;\n    } else if (stats === \"my stats\") {\n        var opts = {};\n        opts.path = path.resolve ? path.resolve(\".\") : \".\";\n        var customStats = env.getStat(opts);\n        if (!customStats) {\n            throw new BrowserslistError(\"Custom usage statistics was not provided\");\n        }\n        data = {};\n        for(var browser in customStats){\n            fillUsage(data, browser, customStats[browser]);\n        }\n    } else if (typeof stats === \"string\") {\n        if (stats.length > 2) {\n            stats = stats.toLowerCase();\n        } else {\n            stats = stats.toUpperCase();\n        }\n        env.loadCountry(browserslist.usage, stats, browserslist.data);\n        data = browserslist.usage[stats];\n    } else {\n        if (\"dataByBrowser\" in stats) {\n            stats = stats.dataByBrowser;\n        }\n        data = {};\n        for(var name in stats){\n            for(var version in stats[name]){\n                data[name + \" \" + version] = stats[name][version];\n            }\n        }\n    }\n    return browsers.reduce(function(all, i) {\n        var usage = data[i];\n        if (usage === undefined) {\n            usage = data[i.replace(/ \\S+$/, \" 0\")];\n        }\n        return all + (usage || 0);\n    }, 0);\n};\nfunction nodeQuery(context, node) {\n    var matched = browserslist.nodeVersions.filter(function(i) {\n        return isVersionsMatch(i, node.version);\n    });\n    if (matched.length === 0) {\n        if (context.ignoreUnknownVersions) {\n            return [];\n        } else {\n            throw new BrowserslistError(\"Unknown version \" + node.version + \" of Node.js\");\n        }\n    }\n    return [\n        \"node \" + matched[matched.length - 1]\n    ];\n}\nfunction sinceQuery(context, node) {\n    var year = parseInt(node.year);\n    var month = parseInt(node.month || \"01\") - 1;\n    var day = parseInt(node.day || \"01\");\n    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);\n}\nfunction coverQuery(context, node) {\n    var coverage = parseFloat(node.coverage);\n    var usage = browserslist.usage.global;\n    if (node.place) {\n        if (node.place.match(/^my\\s+stats$/i)) {\n            if (!context.customUsage) {\n                throw new BrowserslistError(\"Custom usage statistics was not provided\");\n            }\n            usage = context.customUsage;\n        } else {\n            var place;\n            if (node.place.length === 2) {\n                place = node.place.toUpperCase();\n            } else {\n                place = node.place.toLowerCase();\n            }\n            env.loadCountry(browserslist.usage, place, browserslist.data);\n            usage = browserslist.usage[place];\n        }\n    }\n    var versions = Object.keys(usage).sort(function(a, b) {\n        return usage[b] - usage[a];\n    });\n    var coveraged = 0;\n    var result = [];\n    var version;\n    for(var i = 0; i < versions.length; i++){\n        version = versions[i];\n        if (usage[version] === 0) break;\n        coveraged += usage[version];\n        result.push(version);\n        if (coveraged >= coverage) break;\n    }\n    return result;\n}\nvar QUERIES = {\n    last_major_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+major\\s+versions?$/i,\n        select: function(context, node) {\n            return Object.keys(agents).reduce(function(selected, name) {\n                var data = byName(name, context);\n                if (!data) return selected;\n                var list = getMajorVersions(data.released, node.versions);\n                list = list.map(nameMapper(data.name));\n                list = filterJumps(list, data.name, node.versions, context);\n                return selected.concat(list);\n            }, []);\n        }\n    },\n    last_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+versions?$/i,\n        select: function(context, node) {\n            return Object.keys(agents).reduce(function(selected, name) {\n                var data = byName(name, context);\n                if (!data) return selected;\n                var list = data.released.slice(-node.versions);\n                list = list.map(nameMapper(data.name));\n                list = filterJumps(list, data.name, node.versions, context);\n                return selected.concat(list);\n            }, []);\n        }\n    },\n    last_electron_major_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+electron\\s+major\\s+versions?$/i,\n        select: function(context, node) {\n            var validVersions = getMajorVersions(Object.keys(e2c), node.versions);\n            return validVersions.map(function(i) {\n                return \"chrome \" + e2c[i];\n            });\n        }\n    },\n    last_node_major_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+node\\s+major\\s+versions?$/i,\n        select: function(context, node) {\n            return getMajorVersions(browserslist.nodeVersions, node.versions).map(function(version) {\n                return \"node \" + version;\n            });\n        }\n    },\n    last_browser_major_versions: {\n        matches: [\n            \"versions\",\n            \"browser\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+major\\s+versions?$/i,\n        select: function(context, node) {\n            var data = checkName(node.browser, context);\n            var validVersions = getMajorVersions(data.released, node.versions);\n            var list = validVersions.map(nameMapper(data.name));\n            list = filterJumps(list, data.name, node.versions, context);\n            return list;\n        }\n    },\n    last_electron_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+electron\\s+versions?$/i,\n        select: function(context, node) {\n            return Object.keys(e2c).slice(-node.versions).map(function(i) {\n                return \"chrome \" + e2c[i];\n            });\n        }\n    },\n    last_node_versions: {\n        matches: [\n            \"versions\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+node\\s+versions?$/i,\n        select: function(context, node) {\n            return browserslist.nodeVersions.slice(-node.versions).map(function(version) {\n                return \"node \" + version;\n            });\n        }\n    },\n    last_browser_versions: {\n        matches: [\n            \"versions\",\n            \"browser\"\n        ],\n        regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+versions?$/i,\n        select: function(context, node) {\n            var data = checkName(node.browser, context);\n            var list = data.released.slice(-node.versions).map(nameMapper(data.name));\n            list = filterJumps(list, data.name, node.versions, context);\n            return list;\n        }\n    },\n    unreleased_versions: {\n        matches: [],\n        regexp: /^unreleased\\s+versions$/i,\n        select: function(context) {\n            return Object.keys(agents).reduce(function(selected, name) {\n                var data = byName(name, context);\n                if (!data) return selected;\n                var list = data.versions.filter(function(v) {\n                    return data.released.indexOf(v) === -1;\n                });\n                list = list.map(nameMapper(data.name));\n                return selected.concat(list);\n            }, []);\n        }\n    },\n    unreleased_electron_versions: {\n        matches: [],\n        regexp: /^unreleased\\s+electron\\s+versions?$/i,\n        select: function() {\n            return [];\n        }\n    },\n    unreleased_browser_versions: {\n        matches: [\n            \"browser\"\n        ],\n        regexp: /^unreleased\\s+(\\w+)\\s+versions?$/i,\n        select: function(context, node) {\n            var data = checkName(node.browser, context);\n            return data.versions.filter(function(v) {\n                return data.released.indexOf(v) === -1;\n            }).map(nameMapper(data.name));\n        }\n    },\n    last_years: {\n        matches: [\n            \"years\"\n        ],\n        regexp: /^last\\s+(\\d*.?\\d+)\\s+years?$/i,\n        select: function(context, node) {\n            return filterByYear(Date.now() - YEAR * node.years, context);\n        }\n    },\n    since_y: {\n        matches: [\n            \"year\"\n        ],\n        regexp: /^since (\\d+)$/i,\n        select: sinceQuery\n    },\n    since_y_m: {\n        matches: [\n            \"year\",\n            \"month\"\n        ],\n        regexp: /^since (\\d+)-(\\d+)$/i,\n        select: sinceQuery\n    },\n    since_y_m_d: {\n        matches: [\n            \"year\",\n            \"month\",\n            \"day\"\n        ],\n        regexp: /^since (\\d+)-(\\d+)-(\\d+)$/i,\n        select: sinceQuery\n    },\n    popularity: {\n        matches: [\n            \"sign\",\n            \"popularity\"\n        ],\n        regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%$/,\n        select: function(context, node) {\n            var popularity = parseFloat(node.popularity);\n            var usage = browserslist.usage.global;\n            return Object.keys(usage).reduce(function(result, version) {\n                if (node.sign === \">\") {\n                    if (usage[version] > popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<\") {\n                    if (usage[version] < popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<=\") {\n                    if (usage[version] <= popularity) {\n                        result.push(version);\n                    }\n                } else if (usage[version] >= popularity) {\n                    result.push(version);\n                }\n                return result;\n            }, []);\n        }\n    },\n    popularity_in_my_stats: {\n        matches: [\n            \"sign\",\n            \"popularity\"\n        ],\n        regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+my\\s+stats$/,\n        select: function(context, node) {\n            var popularity = parseFloat(node.popularity);\n            if (!context.customUsage) {\n                throw new BrowserslistError(\"Custom usage statistics was not provided\");\n            }\n            var usage = context.customUsage;\n            return Object.keys(usage).reduce(function(result, version) {\n                var percentage = usage[version];\n                if (percentage == null) {\n                    return result;\n                }\n                if (node.sign === \">\") {\n                    if (percentage > popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<\") {\n                    if (percentage < popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<=\") {\n                    if (percentage <= popularity) {\n                        result.push(version);\n                    }\n                } else if (percentage >= popularity) {\n                    result.push(version);\n                }\n                return result;\n            }, []);\n        }\n    },\n    popularity_in_config_stats: {\n        matches: [\n            \"sign\",\n            \"popularity\",\n            \"config\"\n        ],\n        regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(\\S+)\\s+stats$/,\n        select: function(context, node) {\n            var popularity = parseFloat(node.popularity);\n            var stats = env.loadStat(context, node.config, browserslist.data);\n            if (stats) {\n                context.customUsage = {};\n                for(var browser in stats){\n                    fillUsage(context.customUsage, browser, stats[browser]);\n                }\n            }\n            if (!context.customUsage) {\n                throw new BrowserslistError(\"Custom usage statistics was not provided\");\n            }\n            var usage = context.customUsage;\n            return Object.keys(usage).reduce(function(result, version) {\n                var percentage = usage[version];\n                if (percentage == null) {\n                    return result;\n                }\n                if (node.sign === \">\") {\n                    if (percentage > popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<\") {\n                    if (percentage < popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<=\") {\n                    if (percentage <= popularity) {\n                        result.push(version);\n                    }\n                } else if (percentage >= popularity) {\n                    result.push(version);\n                }\n                return result;\n            }, []);\n        }\n    },\n    popularity_in_place: {\n        matches: [\n            \"sign\",\n            \"popularity\",\n            \"place\"\n        ],\n        regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+((alt-)?\\w\\w)$/,\n        select: function(context, node) {\n            var popularity = parseFloat(node.popularity);\n            var place = node.place;\n            if (place.length === 2) {\n                place = place.toUpperCase();\n            } else {\n                place = place.toLowerCase();\n            }\n            env.loadCountry(browserslist.usage, place, browserslist.data);\n            var usage = browserslist.usage[place];\n            return Object.keys(usage).reduce(function(result, version) {\n                var percentage = usage[version];\n                if (percentage == null) {\n                    return result;\n                }\n                if (node.sign === \">\") {\n                    if (percentage > popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<\") {\n                    if (percentage < popularity) {\n                        result.push(version);\n                    }\n                } else if (node.sign === \"<=\") {\n                    if (percentage <= popularity) {\n                        result.push(version);\n                    }\n                } else if (percentage >= popularity) {\n                    result.push(version);\n                }\n                return result;\n            }, []);\n        }\n    },\n    cover: {\n        matches: [\n            \"coverage\"\n        ],\n        regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%$/i,\n        select: coverQuery\n    },\n    cover_in: {\n        matches: [\n            \"coverage\",\n            \"place\"\n        ],\n        regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w)$/i,\n        select: coverQuery\n    },\n    supports: {\n        matches: [\n            \"supportType\",\n            \"feature\"\n        ],\n        regexp: /^(?:(fully|partially)\\s+)?supports\\s+([\\w-]+)$/,\n        select: function(context, node) {\n            env.loadFeature(browserslist.cache, node.feature);\n            var withPartial = node.supportType !== \"fully\";\n            var features = browserslist.cache[node.feature];\n            var result = [];\n            for(var name in features){\n                var data = byName(name, context);\n                // Only check desktop when latest released mobile has support\n                var iMax = data.released.length - 1;\n                while(iMax >= 0){\n                    if (data.released[iMax] in features[name]) break;\n                    iMax--;\n                }\n                var checkDesktop = context.mobileToDesktop && name in browserslist.desktopNames && isSupported(features[name][data.released[iMax]], withPartial);\n                data.versions.forEach(function(version) {\n                    var flags = features[name][version];\n                    if (flags === undefined && checkDesktop) {\n                        flags = features[browserslist.desktopNames[name]][version];\n                    }\n                    if (isSupported(flags, withPartial)) {\n                        result.push(name + \" \" + version);\n                    }\n                });\n            }\n            return result;\n        }\n    },\n    electron_range: {\n        matches: [\n            \"from\",\n            \"to\"\n        ],\n        regexp: /^electron\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n        select: function(context, node) {\n            var fromToUse = normalizeElectron(node.from);\n            var toToUse = normalizeElectron(node.to);\n            var from = parseFloat(node.from);\n            var to = parseFloat(node.to);\n            if (!e2c[fromToUse]) {\n                throw new BrowserslistError(\"Unknown version \" + from + \" of electron\");\n            }\n            if (!e2c[toToUse]) {\n                throw new BrowserslistError(\"Unknown version \" + to + \" of electron\");\n            }\n            return Object.keys(e2c).filter(function(i) {\n                var parsed = parseFloat(i);\n                return parsed >= from && parsed <= to;\n            }).map(function(i) {\n                return \"chrome \" + e2c[i];\n            });\n        }\n    },\n    node_range: {\n        matches: [\n            \"from\",\n            \"to\"\n        ],\n        regexp: /^node\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n        select: function(context, node) {\n            return browserslist.nodeVersions.filter(semverFilterLoose(\">=\", node.from)).filter(semverFilterLoose(\"<=\", node.to)).map(function(v) {\n                return \"node \" + v;\n            });\n        }\n    },\n    browser_range: {\n        matches: [\n            \"browser\",\n            \"from\",\n            \"to\"\n        ],\n        regexp: /^(\\w+)\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n        select: function(context, node) {\n            var data = checkName(node.browser, context);\n            var from = parseFloat(normalizeVersion(data, node.from) || node.from);\n            var to = parseFloat(normalizeVersion(data, node.to) || node.to);\n            function filter(v) {\n                var parsed = parseFloat(v);\n                return parsed >= from && parsed <= to;\n            }\n            return data.released.filter(filter).map(nameMapper(data.name));\n        }\n    },\n    electron_ray: {\n        matches: [\n            \"sign\",\n            \"version\"\n        ],\n        regexp: /^electron\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n        select: function(context, node) {\n            var versionToUse = normalizeElectron(node.version);\n            return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function(i) {\n                return \"chrome \" + e2c[i];\n            });\n        }\n    },\n    node_ray: {\n        matches: [\n            \"sign\",\n            \"version\"\n        ],\n        regexp: /^node\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n        select: function(context, node) {\n            return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function(v) {\n                return \"node \" + v;\n            });\n        }\n    },\n    browser_ray: {\n        matches: [\n            \"browser\",\n            \"sign\",\n            \"version\"\n        ],\n        regexp: /^(\\w+)\\s*(>=?|<=?)\\s*([\\d.]+)$/,\n        select: function(context, node) {\n            var version = node.version;\n            var data = checkName(node.browser, context);\n            var alias = browserslist.versionAliases[data.name][version];\n            if (alias) version = alias;\n            return data.released.filter(generateFilter(node.sign, version)).map(function(v) {\n                return data.name + \" \" + v;\n            });\n        }\n    },\n    firefox_esr: {\n        matches: [],\n        regexp: /^(firefox|ff|fx)\\s+esr$/i,\n        select: function() {\n            return [\n                \"firefox 115\",\n                \"firefox 128\"\n            ];\n        }\n    },\n    opera_mini_all: {\n        matches: [],\n        regexp: /(operamini|op_mini)\\s+all/i,\n        select: function() {\n            return [\n                \"op_mini all\"\n            ];\n        }\n    },\n    electron_version: {\n        matches: [\n            \"version\"\n        ],\n        regexp: /^electron\\s+([\\d.]+)$/i,\n        select: function(context, node) {\n            var versionToUse = normalizeElectron(node.version);\n            var chrome = e2c[versionToUse];\n            if (!chrome) {\n                throw new BrowserslistError(\"Unknown version \" + node.version + \" of electron\");\n            }\n            return [\n                \"chrome \" + chrome\n            ];\n        }\n    },\n    node_major_version: {\n        matches: [\n            \"version\"\n        ],\n        regexp: /^node\\s+(\\d+)$/i,\n        select: nodeQuery\n    },\n    node_minor_version: {\n        matches: [\n            \"version\"\n        ],\n        regexp: /^node\\s+(\\d+\\.\\d+)$/i,\n        select: nodeQuery\n    },\n    node_patch_version: {\n        matches: [\n            \"version\"\n        ],\n        regexp: /^node\\s+(\\d+\\.\\d+\\.\\d+)$/i,\n        select: nodeQuery\n    },\n    current_node: {\n        matches: [],\n        regexp: /^current\\s+node$/i,\n        select: function(context) {\n            return [\n                env.currentNode(resolve, context)\n            ];\n        }\n    },\n    maintained_node: {\n        matches: [],\n        regexp: /^maintained\\s+node\\s+versions$/i,\n        select: function(context) {\n            var now = Date.now();\n            var queries = Object.keys(jsEOL).filter(function(key) {\n                return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);\n            }).map(function(key) {\n                return \"node \" + key.slice(1);\n            });\n            return resolve(queries, context);\n        }\n    },\n    phantomjs_1_9: {\n        matches: [],\n        regexp: /^phantomjs\\s+1.9$/i,\n        select: function() {\n            return [\n                \"safari 5\"\n            ];\n        }\n    },\n    phantomjs_2_1: {\n        matches: [],\n        regexp: /^phantomjs\\s+2.1$/i,\n        select: function() {\n            return [\n                \"safari 6\"\n            ];\n        }\n    },\n    browser_version: {\n        matches: [\n            \"browser\",\n            \"version\"\n        ],\n        regexp: /^(\\w+)\\s+(tp|[\\d.]+)$/i,\n        select: function(context, node) {\n            var version = node.version;\n            if (/^tp$/i.test(version)) version = \"TP\";\n            var data = checkName(node.browser, context);\n            var alias = normalizeVersion(data, version);\n            if (alias) {\n                version = alias;\n            } else {\n                if (version.indexOf(\".\") === -1) {\n                    alias = version + \".0\";\n                } else {\n                    alias = version.replace(/\\.0$/, \"\");\n                }\n                alias = normalizeVersion(data, alias);\n                if (alias) {\n                    version = alias;\n                } else if (context.ignoreUnknownVersions) {\n                    return [];\n                } else {\n                    throw new BrowserslistError(\"Unknown version \" + version + \" of \" + node.browser);\n                }\n            }\n            return [\n                data.name + \" \" + version\n            ];\n        }\n    },\n    browserslist_config: {\n        matches: [],\n        regexp: /^browserslist config$/i,\n        select: function(context) {\n            return browserslist(undefined, context);\n        }\n    },\n    extends: {\n        matches: [\n            \"config\"\n        ],\n        regexp: /^extends (.+)$/i,\n        select: function(context, node) {\n            return resolve(env.loadQueries(context, node.config), context);\n        }\n    },\n    defaults: {\n        matches: [],\n        regexp: /^defaults$/i,\n        select: function(context) {\n            return resolve(browserslist.defaults, context);\n        }\n    },\n    dead: {\n        matches: [],\n        regexp: /^dead$/i,\n        select: function(context) {\n            var dead = [\n                \"Baidu >= 0\",\n                \"ie <= 11\",\n                \"ie_mob <= 11\",\n                \"bb <= 10\",\n                \"op_mob <= 12.1\",\n                \"samsung 4\"\n            ];\n            return resolve(dead, context);\n        }\n    },\n    unknown: {\n        matches: [],\n        regexp: /^(\\w+)$/i,\n        select: function(context, node) {\n            if (byName(node.query, context)) {\n                throw new BrowserslistError(\"Specify versions in Browserslist query for browser \" + node.query);\n            } else {\n                throw unknownQuery(node.query);\n            }\n        }\n    }\n};\n(function() {\n    for(var name in agents){\n        var browser = agents[name];\n        browserslist.data[name] = {\n            name: name,\n            versions: normalize(agents[name].versions),\n            released: normalize(agents[name].versions.slice(0, -3)),\n            releaseDate: agents[name].release_date\n        };\n        fillUsage(browserslist.usage.global, name, browser.usage_global);\n        browserslist.versionAliases[name] = {};\n        for(var i = 0; i < browser.versions.length; i++){\n            var full = browser.versions[i];\n            if (!full) continue;\n            if (full.indexOf(\"-\") !== -1) {\n                var interval = full.split(\"-\");\n                for(var j = 0; j < interval.length; j++){\n                    browserslist.versionAliases[name][interval[j]] = full;\n                }\n            }\n        }\n    }\n    browserslist.nodeVersions = jsReleases.map(function(release) {\n        return release.version;\n    });\n})();\nmodule.exports = browserslist;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browserslist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/browserslist/node.js":
/*!*******************************************!*\
  !*** ./node_modules/browserslist/node.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar feature = (__webpack_require__(/*! caniuse-lite/dist/unpacker/feature */ \"(ssr)/./node_modules/caniuse-lite/dist/unpacker/feature.js\")[\"default\"]);\nvar region = (__webpack_require__(/*! caniuse-lite/dist/unpacker/region */ \"(ssr)/./node_modules/caniuse-lite/dist/unpacker/region.js\")[\"default\"]);\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar BrowserslistError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/browserslist/error.js\");\nvar IS_SECTION = /^\\s*\\[(.+)]\\s*$/;\nvar CONFIG_PATTERN = /^browserslist-config-/;\nvar SCOPED_CONFIG__PATTERN = /@[^/]+(?:\\/[^/]+)?\\/browserslist-config(?:-|$|\\/)/;\nvar TIME_TO_UPDATE_CANIUSE = 6 * 30 * 24 * 60 * 60 * 1000;\nvar FORMAT = \"Browserslist config should be a string or an array \" + \"of strings with browser queries\";\nvar dataTimeChecked = false;\nvar filenessCache = {};\nvar configCache = {};\nfunction checkExtend(name) {\n    var use = \" Use `dangerousExtend` option to disable.\";\n    if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {\n        throw new BrowserslistError(\"Browserslist config needs `browserslist-config-` prefix. \" + use);\n    }\n    if (name.replace(/^@[^/]+\\//, \"\").indexOf(\".\") !== -1) {\n        throw new BrowserslistError(\"`.` not allowed in Browserslist config name. \" + use);\n    }\n    if (name.indexOf(\"node_modules\") !== -1) {\n        throw new BrowserslistError(\"`node_modules` not allowed in Browserslist config.\" + use);\n    }\n}\nfunction isFile(file) {\n    if (file in filenessCache) {\n        return filenessCache[file];\n    }\n    var result = fs.existsSync(file) && fs.statSync(file).isFile();\n    if (!process.env.BROWSERSLIST_DISABLE_CACHE) {\n        filenessCache[file] = result;\n    }\n    return result;\n}\nfunction eachParent(file, callback) {\n    var dir = isFile(file) ? path.dirname(file) : file;\n    var loc = path.resolve(dir);\n    do {\n        if (!pathInRoot(loc)) break;\n        var result = callback(loc);\n        if (typeof result !== \"undefined\") return result;\n    }while (loc !== (loc = path.dirname(loc)));\n    return undefined;\n}\nfunction pathInRoot(p) {\n    if (!process.env.BROWSERSLIST_ROOT_PATH) return true;\n    var rootPath = path.resolve(process.env.BROWSERSLIST_ROOT_PATH);\n    if (path.relative(rootPath, p).substring(0, 2) === \"..\") {\n        return false;\n    }\n    return true;\n}\nfunction check(section) {\n    if (Array.isArray(section)) {\n        for(var i = 0; i < section.length; i++){\n            if (typeof section[i] !== \"string\") {\n                throw new BrowserslistError(FORMAT);\n            }\n        }\n    } else if (typeof section !== \"string\") {\n        throw new BrowserslistError(FORMAT);\n    }\n}\nfunction pickEnv(config, opts) {\n    if (typeof config !== \"object\") return config;\n    var name;\n    if (typeof opts.env === \"string\") {\n        name = opts.env;\n    } else if (process.env.BROWSERSLIST_ENV) {\n        name = process.env.BROWSERSLIST_ENV;\n    } else if (true) {\n        name = \"development\";\n    } else {}\n    if (opts.throwOnMissing) {\n        if (name && name !== \"defaults\" && !config[name]) {\n            throw new BrowserslistError(\"Missing config for Browserslist environment `\" + name + \"`\");\n        }\n    }\n    return config[name] || config.defaults;\n}\nfunction parsePackage(file) {\n    var config = JSON.parse(fs.readFileSync(file).toString().replace(/^\\uFEFF/m, \"\"));\n    if (config.browserlist && !config.browserslist) {\n        throw new BrowserslistError(\"`browserlist` key instead of `browserslist` in \" + file);\n    }\n    var list = config.browserslist;\n    if (Array.isArray(list) || typeof list === \"string\") {\n        list = {\n            defaults: list\n        };\n    }\n    for(var i in list){\n        check(list[i]);\n    }\n    return list;\n}\nfunction latestReleaseTime(agents) {\n    var latest = 0;\n    for(var name in agents){\n        var dates = agents[name].releaseDate || {};\n        for(var key in dates){\n            if (latest < dates[key]) {\n                latest = dates[key];\n            }\n        }\n    }\n    return latest * 1000;\n}\nfunction normalizeStats(data, stats) {\n    if (!data) {\n        data = {};\n    }\n    if (stats && \"dataByBrowser\" in stats) {\n        stats = stats.dataByBrowser;\n    }\n    if (typeof stats !== \"object\") return undefined;\n    var normalized = {};\n    for(var i in stats){\n        var versions = Object.keys(stats[i]);\n        if (versions.length === 1 && data[i] && data[i].versions.length === 1) {\n            var normal = data[i].versions[0];\n            normalized[i] = {};\n            normalized[i][normal] = stats[i][versions[0]];\n        } else {\n            normalized[i] = stats[i];\n        }\n    }\n    return normalized;\n}\nfunction normalizeUsageData(usageData, data) {\n    for(var browser in usageData){\n        var browserUsage = usageData[browser];\n        // https://github.com/browserslist/browserslist/issues/431#issuecomment-565230615\n        // caniuse-db returns { 0: \"percentage\" } for `and_*` regional stats\n        if (\"0\" in browserUsage) {\n            var versions = data[browser].versions;\n            browserUsage[versions[versions.length - 1]] = browserUsage[0];\n            delete browserUsage[0];\n        }\n    }\n}\nmodule.exports = {\n    loadQueries: function loadQueries(ctx, name) {\n        if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {\n            checkExtend(name);\n        }\n        var queries = __webpack_require__(\"(ssr)/./node_modules/browserslist sync recursive\")(__webpack_require__(\"(ssr)/./node_modules/browserslist sync recursive\").resolve(name, {\n            paths: [\n                \".\",\n                ctx.path\n            ]\n        }));\n        if (queries) {\n            if (Array.isArray(queries)) {\n                return queries;\n            } else if (typeof queries === \"object\") {\n                if (!queries.defaults) queries.defaults = [];\n                return pickEnv(queries, ctx, name);\n            }\n        }\n        throw new BrowserslistError(\"`\" + name + \"` config exports not an array of queries\" + \" or an object of envs\");\n    },\n    loadStat: function loadStat(ctx, name, data) {\n        if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {\n            checkExtend(name);\n        }\n        var stats = __webpack_require__(\"(ssr)/./node_modules/browserslist sync recursive\")(__webpack_require__(\"(ssr)/./node_modules/browserslist sync recursive\").resolve(path.join(name, \"browserslist-stats.json\"), {\n            paths: [\n                \".\"\n            ]\n        }));\n        return normalizeStats(data, stats);\n    },\n    getStat: function getStat(opts, data) {\n        var stats;\n        if (opts.stats) {\n            stats = opts.stats;\n        } else if (process.env.BROWSERSLIST_STATS) {\n            stats = process.env.BROWSERSLIST_STATS;\n        } else if (opts.path && path.resolve && fs.existsSync) {\n            stats = eachParent(opts.path, function(dir) {\n                var file = path.join(dir, \"browserslist-stats.json\");\n                return isFile(file) ? file : undefined;\n            });\n        }\n        if (typeof stats === \"string\") {\n            try {\n                stats = JSON.parse(fs.readFileSync(stats));\n            } catch (e) {\n                throw new BrowserslistError(\"Can't read \" + stats);\n            }\n        }\n        return normalizeStats(data, stats);\n    },\n    loadConfig: function loadConfig(opts) {\n        if (process.env.BROWSERSLIST) {\n            return process.env.BROWSERSLIST;\n        } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {\n            var file = opts.config || process.env.BROWSERSLIST_CONFIG;\n            if (path.basename(file) === \"package.json\") {\n                return pickEnv(parsePackage(file), opts);\n            } else {\n                return pickEnv(module.exports.readConfig(file), opts);\n            }\n        } else if (opts.path) {\n            return pickEnv(module.exports.findConfig(opts.path), opts);\n        } else {\n            return undefined;\n        }\n    },\n    loadCountry: function loadCountry(usage, country, data) {\n        var code = country.replace(/[^\\w-]/g, \"\");\n        if (!usage[code]) {\n            var compressed;\n            try {\n                compressed = __webpack_require__(\"(ssr)/./node_modules/caniuse-lite/data/regions ./node_modules/caniuse-lite/data/regions sync recursive ^\\\\.\\\\/.*\\\\.js$\")(\"./\" + code + \".js\");\n            } catch (e) {\n                throw new BrowserslistError(\"Unknown region name `\" + code + \"`.\");\n            }\n            var usageData = region(compressed);\n            normalizeUsageData(usageData, data);\n            usage[country] = {};\n            for(var i in usageData){\n                for(var j in usageData[i]){\n                    usage[country][i + \" \" + j] = usageData[i][j];\n                }\n            }\n        }\n    },\n    loadFeature: function loadFeature(features, name) {\n        name = name.replace(/[^\\w-]/g, \"\");\n        if (features[name]) return;\n        var compressed;\n        try {\n            compressed = __webpack_require__(\"(ssr)/./node_modules/caniuse-lite/data/features ./node_modules/caniuse-lite/data/features sync recursive ^\\\\.\\\\/.*\\\\.js$\")(\"./\" + name + \".js\");\n        } catch (e) {\n            throw new BrowserslistError(\"Unknown feature name `\" + name + \"`.\");\n        }\n        var stats = feature(compressed).stats;\n        features[name] = {};\n        for(var i in stats){\n            features[name][i] = {};\n            for(var j in stats[i]){\n                features[name][i][j] = stats[i][j];\n            }\n        }\n    },\n    parseConfig: function parseConfig(string) {\n        var result = {\n            defaults: []\n        };\n        var sections = [\n            \"defaults\"\n        ];\n        string.toString().replace(/#[^\\n]*/g, \"\").split(/\\n|,/).map(function(line) {\n            return line.trim();\n        }).filter(function(line) {\n            return line !== \"\";\n        }).forEach(function(line) {\n            if (IS_SECTION.test(line)) {\n                sections = line.match(IS_SECTION)[1].trim().split(\" \");\n                sections.forEach(function(section) {\n                    if (result[section]) {\n                        throw new BrowserslistError(\"Duplicate section \" + section + \" in Browserslist config\");\n                    }\n                    result[section] = [];\n                });\n            } else {\n                sections.forEach(function(section) {\n                    result[section].push(line);\n                });\n            }\n        });\n        return result;\n    },\n    readConfig: function readConfig(file) {\n        if (!isFile(file)) {\n            throw new BrowserslistError(\"Can't read \" + file + \" config\");\n        }\n        return module.exports.parseConfig(fs.readFileSync(file));\n    },\n    findConfig: function findConfig(from) {\n        from = path.resolve(from);\n        var passed = [];\n        var resolved = eachParent(from, function(dir) {\n            if (dir in configCache) {\n                return configCache[dir];\n            }\n            passed.push(dir);\n            var config = path.join(dir, \"browserslist\");\n            var pkg = path.join(dir, \"package.json\");\n            var rc = path.join(dir, \".browserslistrc\");\n            var pkgBrowserslist;\n            if (isFile(pkg)) {\n                try {\n                    pkgBrowserslist = parsePackage(pkg);\n                } catch (e) {\n                    if (e.name === \"BrowserslistError\") throw e;\n                    console.warn(\"[Browserslist] Could not parse \" + pkg + \". Ignoring it.\");\n                }\n            }\n            if (isFile(config) && pkgBrowserslist) {\n                throw new BrowserslistError(dir + \" contains both browserslist and package.json with browsers\");\n            } else if (isFile(rc) && pkgBrowserslist) {\n                throw new BrowserslistError(dir + \" contains both .browserslistrc and package.json with browsers\");\n            } else if (isFile(config) && isFile(rc)) {\n                throw new BrowserslistError(dir + \" contains both .browserslistrc and browserslist\");\n            } else if (isFile(config)) {\n                return module.exports.readConfig(config);\n            } else if (isFile(rc)) {\n                return module.exports.readConfig(rc);\n            } else {\n                return pkgBrowserslist;\n            }\n        });\n        if (!process.env.BROWSERSLIST_DISABLE_CACHE) {\n            passed.forEach(function(dir) {\n                configCache[dir] = resolved;\n            });\n        }\n        return resolved;\n    },\n    clearCaches: function clearCaches() {\n        dataTimeChecked = false;\n        filenessCache = {};\n        configCache = {};\n        this.cache = {};\n    },\n    oldDataWarning: function oldDataWarning(agentsObj) {\n        if (dataTimeChecked) return;\n        dataTimeChecked = true;\n        if (process.env.BROWSERSLIST_IGNORE_OLD_DATA) return;\n        var latest = latestReleaseTime(agentsObj);\n        var halfYearAgo = Date.now() - TIME_TO_UPDATE_CANIUSE;\n        if (latest !== 0 && latest < halfYearAgo) {\n            console.warn(\"Browserslist: caniuse-lite is outdated. Please run:\\n\" + \"  npx update-browserslist-db@latest\\n\" + \"  Why you should do it regularly: \" + \"https://github.com/browserslist/update-db#readme\");\n        }\n    },\n    currentNode: function currentNode() {\n        return \"node \" + process.versions.node;\n    },\n    env: process.env\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browserslist/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/browserslist/parse.js":
/*!********************************************!*\
  !*** ./node_modules/browserslist/parse.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nvar AND_REGEXP = /^\\s+and\\s+(.*)/i;\nvar OR_REGEXP = /^(?:,\\s*|\\s+or\\s+)(.*)/i;\nfunction flatten(array) {\n    if (!Array.isArray(array)) return [\n        array\n    ];\n    return array.reduce(function(a, b) {\n        return a.concat(flatten(b));\n    }, []);\n}\nfunction find(string, predicate) {\n    for(var n = 1, max = string.length; n <= max; n++){\n        var parsed = string.substr(-n, n);\n        if (predicate(parsed, n, max)) {\n            return string.slice(0, -n);\n        }\n    }\n    return \"\";\n}\nfunction matchQuery(all, query) {\n    var node = {\n        query: query\n    };\n    if (query.indexOf(\"not \") === 0) {\n        node.not = true;\n        query = query.slice(4);\n    }\n    for(var name in all){\n        var type = all[name];\n        var match = query.match(type.regexp);\n        if (match) {\n            node.type = name;\n            for(var i = 0; i < type.matches.length; i++){\n                node[type.matches[i]] = match[i + 1];\n            }\n            return node;\n        }\n    }\n    node.type = \"unknown\";\n    return node;\n}\nfunction matchBlock(all, string, qs) {\n    var node;\n    return find(string, function(parsed, n, max) {\n        if (AND_REGEXP.test(parsed)) {\n            node = matchQuery(all, parsed.match(AND_REGEXP)[1]);\n            node.compose = \"and\";\n            qs.unshift(node);\n            return true;\n        } else if (OR_REGEXP.test(parsed)) {\n            node = matchQuery(all, parsed.match(OR_REGEXP)[1]);\n            node.compose = \"or\";\n            qs.unshift(node);\n            return true;\n        } else if (n === max) {\n            node = matchQuery(all, parsed.trim());\n            node.compose = \"or\";\n            qs.unshift(node);\n            return true;\n        }\n        return false;\n    });\n}\nmodule.exports = function parse(all, queries) {\n    if (!Array.isArray(queries)) queries = [\n        queries\n    ];\n    return flatten(queries.map(function(block) {\n        var qs = [];\n        do {\n            block = matchBlock(all, block, qs);\n        }while (block);\n        return qs;\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnJvd3NlcnNsaXN0L3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhO0FBQ2pCLElBQUlDLFlBQVk7QUFFaEIsU0FBU0MsUUFBUUMsS0FBSztJQUNwQixJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUSxPQUFPO1FBQUNBO0tBQU07SUFDekMsT0FBT0EsTUFBTUcsTUFBTSxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUNoQyxPQUFPRCxFQUFFRSxNQUFNLENBQUNQLFFBQVFNO0lBQzFCLEdBQUcsRUFBRTtBQUNQO0FBRUEsU0FBU0UsS0FBS0MsTUFBTSxFQUFFQyxTQUFTO0lBQzdCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxNQUFNSCxPQUFPSSxNQUFNLEVBQUVGLEtBQUtDLEtBQUtELElBQUs7UUFDbEQsSUFBSUcsU0FBU0wsT0FBT00sTUFBTSxDQUFDLENBQUNKLEdBQUdBO1FBQy9CLElBQUlELFVBQVVJLFFBQVFILEdBQUdDLE1BQU07WUFDN0IsT0FBT0gsT0FBT08sS0FBSyxDQUFDLEdBQUcsQ0FBQ0w7UUFDMUI7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBLFNBQVNNLFdBQVdDLEdBQUcsRUFBRUMsS0FBSztJQUM1QixJQUFJQyxPQUFPO1FBQUVELE9BQU9BO0lBQU07SUFDMUIsSUFBSUEsTUFBTUUsT0FBTyxDQUFDLFlBQVksR0FBRztRQUMvQkQsS0FBS0UsR0FBRyxHQUFHO1FBQ1hILFFBQVFBLE1BQU1ILEtBQUssQ0FBQztJQUN0QjtJQUVBLElBQUssSUFBSU8sUUFBUUwsSUFBSztRQUNwQixJQUFJTSxPQUFPTixHQUFHLENBQUNLLEtBQUs7UUFDcEIsSUFBSUUsUUFBUU4sTUFBTU0sS0FBSyxDQUFDRCxLQUFLRSxNQUFNO1FBQ25DLElBQUlELE9BQU87WUFDVEwsS0FBS0ksSUFBSSxHQUFHRDtZQUNaLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJSCxLQUFLSSxPQUFPLENBQUNmLE1BQU0sRUFBRWMsSUFBSztnQkFDNUNQLElBQUksQ0FBQ0ksS0FBS0ksT0FBTyxDQUFDRCxFQUFFLENBQUMsR0FBR0YsS0FBSyxDQUFDRSxJQUFJLEVBQUU7WUFDdEM7WUFDQSxPQUFPUDtRQUNUO0lBQ0Y7SUFFQUEsS0FBS0ksSUFBSSxHQUFHO0lBQ1osT0FBT0o7QUFDVDtBQUVBLFNBQVNTLFdBQVdYLEdBQUcsRUFBRVQsTUFBTSxFQUFFcUIsRUFBRTtJQUNqQyxJQUFJVjtJQUNKLE9BQU9aLEtBQUtDLFFBQVEsU0FBVUssTUFBTSxFQUFFSCxDQUFDLEVBQUVDLEdBQUc7UUFDMUMsSUFBSWQsV0FBV2lDLElBQUksQ0FBQ2pCLFNBQVM7WUFDM0JNLE9BQU9ILFdBQVdDLEtBQUtKLE9BQU9XLEtBQUssQ0FBQzNCLFdBQVcsQ0FBQyxFQUFFO1lBQ2xEc0IsS0FBS1ksT0FBTyxHQUFHO1lBQ2ZGLEdBQUdHLE9BQU8sQ0FBQ2I7WUFDWCxPQUFPO1FBQ1QsT0FBTyxJQUFJckIsVUFBVWdDLElBQUksQ0FBQ2pCLFNBQVM7WUFDakNNLE9BQU9ILFdBQVdDLEtBQUtKLE9BQU9XLEtBQUssQ0FBQzFCLFVBQVUsQ0FBQyxFQUFFO1lBQ2pEcUIsS0FBS1ksT0FBTyxHQUFHO1lBQ2ZGLEdBQUdHLE9BQU8sQ0FBQ2I7WUFDWCxPQUFPO1FBQ1QsT0FBTyxJQUFJVCxNQUFNQyxLQUFLO1lBQ3BCUSxPQUFPSCxXQUFXQyxLQUFLSixPQUFPb0IsSUFBSTtZQUNsQ2QsS0FBS1ksT0FBTyxHQUFHO1lBQ2ZGLEdBQUdHLE9BQU8sQ0FBQ2I7WUFDWCxPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1Q7QUFDRjtBQUVBZSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTW5CLEdBQUcsRUFBRW9CLE9BQU87SUFDMUMsSUFBSSxDQUFDcEMsTUFBTUMsT0FBTyxDQUFDbUMsVUFBVUEsVUFBVTtRQUFDQTtLQUFRO0lBQ2hELE9BQU90QyxRQUNMc0MsUUFBUUMsR0FBRyxDQUFDLFNBQVVDLEtBQUs7UUFDekIsSUFBSVYsS0FBSyxFQUFFO1FBQ1gsR0FBRztZQUNEVSxRQUFRWCxXQUFXWCxLQUFLc0IsT0FBT1Y7UUFDakMsUUFBU1UsT0FBTTtRQUNmLE9BQU9WO0lBQ1Q7QUFFSiIsInNvdXJjZXMiOlsid2VicGFjazovL25vcy8uL25vZGVfbW9kdWxlcy9icm93c2Vyc2xpc3QvcGFyc2UuanM/NGVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQU5EX1JFR0VYUCA9IC9eXFxzK2FuZFxccysoLiopL2lcbnZhciBPUl9SRUdFWFAgPSAvXig/OixcXHMqfFxccytvclxccyspKC4qKS9pXG5cbmZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkgcmV0dXJuIFthcnJheV1cbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLmNvbmNhdChmbGF0dGVuKGIpKVxuICB9LCBbXSlcbn1cblxuZnVuY3Rpb24gZmluZChzdHJpbmcsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBuID0gMSwgbWF4ID0gc3RyaW5nLmxlbmd0aDsgbiA8PSBtYXg7IG4rKykge1xuICAgIHZhciBwYXJzZWQgPSBzdHJpbmcuc3Vic3RyKC1uLCBuKVxuICAgIGlmIChwcmVkaWNhdGUocGFyc2VkLCBuLCBtYXgpKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIC1uKVxuICAgIH1cbiAgfVxuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gbWF0Y2hRdWVyeShhbGwsIHF1ZXJ5KSB7XG4gIHZhciBub2RlID0geyBxdWVyeTogcXVlcnkgfVxuICBpZiAocXVlcnkuaW5kZXhPZignbm90ICcpID09PSAwKSB7XG4gICAgbm9kZS5ub3QgPSB0cnVlXG4gICAgcXVlcnkgPSBxdWVyeS5zbGljZSg0KVxuICB9XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpIHtcbiAgICB2YXIgdHlwZSA9IGFsbFtuYW1lXVxuICAgIHZhciBtYXRjaCA9IHF1ZXJ5Lm1hdGNoKHR5cGUucmVnZXhwKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgbm9kZS50eXBlID0gbmFtZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLm1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZVt0eXBlLm1hdGNoZXNbaV1dID0gbWF0Y2hbaSArIDFdXG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZVxuICAgIH1cbiAgfVxuXG4gIG5vZGUudHlwZSA9ICd1bmtub3duJ1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiBtYXRjaEJsb2NrKGFsbCwgc3RyaW5nLCBxcykge1xuICB2YXIgbm9kZVxuICByZXR1cm4gZmluZChzdHJpbmcsIGZ1bmN0aW9uIChwYXJzZWQsIG4sIG1heCkge1xuICAgIGlmIChBTkRfUkVHRVhQLnRlc3QocGFyc2VkKSkge1xuICAgICAgbm9kZSA9IG1hdGNoUXVlcnkoYWxsLCBwYXJzZWQubWF0Y2goQU5EX1JFR0VYUClbMV0pXG4gICAgICBub2RlLmNvbXBvc2UgPSAnYW5kJ1xuICAgICAgcXMudW5zaGlmdChub2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKE9SX1JFR0VYUC50ZXN0KHBhcnNlZCkpIHtcbiAgICAgIG5vZGUgPSBtYXRjaFF1ZXJ5KGFsbCwgcGFyc2VkLm1hdGNoKE9SX1JFR0VYUClbMV0pXG4gICAgICBub2RlLmNvbXBvc2UgPSAnb3InXG4gICAgICBxcy51bnNoaWZ0KG5vZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAobiA9PT0gbWF4KSB7XG4gICAgICBub2RlID0gbWF0Y2hRdWVyeShhbGwsIHBhcnNlZC50cmltKCkpXG4gICAgICBub2RlLmNvbXBvc2UgPSAnb3InXG4gICAgICBxcy51bnNoaWZ0KG5vZGUpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZShhbGwsIHF1ZXJpZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXJpZXMpKSBxdWVyaWVzID0gW3F1ZXJpZXNdXG4gIHJldHVybiBmbGF0dGVuKFxuICAgIHF1ZXJpZXMubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIHFzID0gW11cbiAgICAgIGRvIHtcbiAgICAgICAgYmxvY2sgPSBtYXRjaEJsb2NrKGFsbCwgYmxvY2ssIHFzKVxuICAgICAgfSB3aGlsZSAoYmxvY2spXG4gICAgICByZXR1cm4gcXNcbiAgICB9KVxuICApXG59XG4iXSwibmFtZXMiOlsiQU5EX1JFR0VYUCIsIk9SX1JFR0VYUCIsImZsYXR0ZW4iLCJhcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInJlZHVjZSIsImEiLCJiIiwiY29uY2F0IiwiZmluZCIsInN0cmluZyIsInByZWRpY2F0ZSIsIm4iLCJtYXgiLCJsZW5ndGgiLCJwYXJzZWQiLCJzdWJzdHIiLCJzbGljZSIsIm1hdGNoUXVlcnkiLCJhbGwiLCJxdWVyeSIsIm5vZGUiLCJpbmRleE9mIiwibm90IiwibmFtZSIsInR5cGUiLCJtYXRjaCIsInJlZ2V4cCIsImkiLCJtYXRjaGVzIiwibWF0Y2hCbG9jayIsInFzIiwidGVzdCIsImNvbXBvc2UiLCJ1bnNoaWZ0IiwidHJpbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZSIsInF1ZXJpZXMiLCJtYXAiLCJibG9jayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browserslist/parse.js\n");

/***/ })

};
;